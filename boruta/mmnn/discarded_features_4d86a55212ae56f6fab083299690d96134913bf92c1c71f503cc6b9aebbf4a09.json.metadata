{
    "creation_time": 1639171130.4228244,
    "creation_time_human": "2021-12-10 21:18:50",
    "time_delta": 307.3810131549835,
    "time_delta_human": "5 minutes and 7 seconds",
    "file_dump_time": 0.003557920455932617,
    "file_dump_time_human": "0 seconds",
    "file_dump_size": 2,
    "file_dump_size_human": "2 Bytes",
    "load_kwargs": {},
    "dump_kwargs": {},
    "function_name": "execute_boruta_feature_selection",
    "function_file": "<ipython-input-18-29a603a08309>:4",
    "args_to_ignore": [
        "X_train",
        "y_train"
    ],
    "source": "@Cache(\n    cache_path=[\n        \"/content/drive/MyDrive/Colab_Notebooks/Bioinformatica/Progetto/MMNN/boruta/kept_features_{_hash}.json\",\n        \"/content/drive/MyDrive/Colab_Notebooks/Bioinformatica/Progetto/MMNN/boruta/discarded_features_{_hash}.json\"\n    ],\n    args_to_ignore=[\n        \"X_train\", \"y_train\"\n    ]\n)\ndef execute_boruta_feature_selection(\n    X_train: pd.DataFrame,\n    y_train: np.ndarray,\n    holdout_number: int,\n    task_name: str,\n    max_iter: int = 100\n):\n    \"\"\"Returns tuple with list of kept features and list of discared features.\n    \n    Parameters\n    --------------------------\n    X_train: pd.DataFrame,\n        The data reserved for the input of the training of the Boruta model.\n    y_train: np.ndarray,\n        The data reserved for the output of the training of the Boruta model.\n    holdout_number: int,\n        The current holdout number.\n    task_name: str,\n        The name of the task.\n    max_iter: int = 100,\n        Number of iterations to run Boruta for.\n    \"\"\"\n\n    model = RandomForestClassifier(n_jobs=cpu_count(), class_weight='balanced_subsample', max_depth=5)\n    \n    # Create the Boruta model\n    boruta_selector = BorutaPy(\n        # Defining the model that Boruta should use.\n        model,\n        # We leave the number of estimators to be decided by Boruta\n        n_estimators='auto',\n        verbose=False,\n        alpha=0.05, # p_value\n        # In practice one would run at least 100-200 times,\n        # until all tentative features are exausted.\n        max_iter=max_iter, \n        random_state=42,\n    )\n    # Fit the Boruta model\n    boruta_selector.fit(X_train.values, y_train)\n    \n    # Get the kept features and discarded features\n    kept_features = list(X_train.columns[boruta_selector.support_])\n    discarded_features = list(X_train.columns[~boruta_selector.support_])\n    \n    # Filter out the unused featured.\n    return kept_features, discarded_features\n",
    "backend_metadata": {},
    "parameters": {
        "max_iter": 10,
        "holdout_number": 1,
        "task_name": "active_promoters_vs_inactive_promoters"
    }
}